TRIGGERS :
==========
	A set of PL/SQL statements stored permanently in database and “Automatically” activated when ever an EvenT Raising statement(DML) is performed.
	They are used to impose user defined Restrictions(or)Business Rules on Tables.They are also activated when Tables are manipulated by other users or by other application S/w tools.They provide High Security on tables.They are stored in “USER_TRIGGERS” system table.

Trigger Parts:
============
1. Trigger Event :
===============
	- Indicates when to activate the Trigger
 
    	Before
			Insert, Update, Delete   = 6 Events
	After

2.Trigger Type :
==============
     - Indicate the type of Trigger

a.	Row Trigger :  Trigger is activated for Every Row 
                       manipulated   by DML statement.

b.	Statement Trigger: Trigger is activated only once
                           for 1 DML statement

3.	Trigger Restriction :  

         it Supports to stop the Trigger Execution based
                                               on condition

4.	Trigger Body :  

A set of PL/SQL statements.

Syntax:
======
     Create or Replace Trigger <Trigger_name>
     Before/After insert or update OR delete    - (1)
     [ of <columns> ] on <table name>
     [ for each row     -  (2)
       When <condition>  (TRUE -> Executes the trigger, 
                          FALSE - Not execute)		- (3)
       Declare
           <variable declaration>; ]
     Begin
       <exec statements>;		- (4)
       [ Exception
            <exec statements>; ]
     End;

sql> insert into dept values(50,'economics','hyd')
        :dname='ECONOMICS'   :loc='hyd'   :depnto=40   -> sql buffer
Ex:
Create or Replace Trigger Dept_Trig
Before insert on dept
for each row
begin
 :new.dname:=upper(:new.dname);
 :NEW.LOC:=UPPER(:NEW.LOC);
End;

Ex:
Write a Trigger program to take employee backup.
Create a backup table with same structure of EMP table.
Create table Backup as select * from emp where 1=2;
If where condition is false it copies Employee table structure only.

Sol:
Trigger Name: Backup_Trig
Table Name: EMP
Trigger Event: After Delete

Create or Replace Trigger Backup_Trig
After Delete on Emp
for each row
Begin
 insert into backup values(:old.empno,:old.ename,:old.job,:old.mgr,
                           :old.Hiredate,:old.sal,:old.comm,:old.deptno);
End;

SQL> Delete from Emp where Empno=7934;
sql> select * from Emp;
sql> Select * from Backup;

Example:
---------------
 -> to increment employee salary automatically.
incr:
empno  amount
7788    1000

Create a Increment Table:
-------------------------
Create table Incr(Empno Number(4), Amount Number(8,2));

Trigger Name: Incr_Trig
Table Name: Incr
Trigger Event: After Insert

Sol:
Create or Replace Trigger Incr_Trig
After Insert on Incr 
for each row
Begin
 Update Emp set sal=sal+:new.Amount where Empno=:new.empno;
End;

Statement Level Triggers:
------------------------------------------
Create a Holiday table:
--------------------------------------
Create table Holiday(Hdate Date);

Insert into rows into Holiday table:
----------------------------------------------------------
Insert into Holiday values('&hdate');

Ex:
Trigger Name: Holi_Trig
Table Name: Emp
Trigger Event: Before insert or update or delete

sol:
Create or Replace Trigger Holi_Trig
Before Insert or update or delete 
on Emp
Declare
 cnt Number;
Begin
 if to_char(sysdate,'hh24') not between 10 and 16 then
     raise_application_error(-20001,'Offtimings, Trans. are Not allowed.');
 End if;
 
 if to_char(sysdate,'dy') in ('sat','sun') then
     raise_application_error(-20002,'Weekends, Trans. are Not Allowed.');
 end if;
 
 select count(hdate) into cnt from Holiday 
	 where to_char(sysdate,'dd/mm/yy')=to_char(hdate,'dd/mm/yy');
 if cnt>0 then
     raise_application_error(-20003,'Today Public Holiday, Trans. are Not Allowed.');
 End if;
End;

Dropping Triggers:
================
sql> Drop trigger <triggername>;

ex:
Drop trigger Holi_Trig;

